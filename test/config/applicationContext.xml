<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:jee="http://www.springframework.org/schema/jee"  
       xmlns:tx="http://www.springframework.org/schema/tx"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:aop="http://www.springframework.org/schema/aop"  
       xmlns:task="http://www.springframework.org/schema/task"  
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd  
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"  
       default-lazy-init="true" default-autowire="byName"> 
	
	<context:annotation-config />
	<context:component-scan base-package="com.jty" />
	
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 定义使用druid连接池的数据源 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
    	<property name="slowSqlMillis" value="2000" />
    	<property name="logSlowSql" value="true" />
	</bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		  <!-- 驱动名称 -->  
        <property name="driverClassName" value="${jdbc.driverClass}" />  
        <!-- JDBC连接串 -->  
        <property name="url"  value="${jdbc.jdbcUrl}" />  
        <!-- 数据库用户名称 -->  
        <property name="username" value="${jdbc.user}" />  
        <!-- 数据库密码 -->  
        <property name="password" value="${jdbc.password}" />  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="${jdbc.maxActive}" />  
        <!-- 初始化大小 -->  
        <property name="initialSize" value="${jdbc.initialSize}" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${jdbc.maxWait}" />  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${jdbc.minIdle}" />  
        <!-- 逐出连接的检测时间间隔 -->  
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />  
        <!-- 最小逐出时间 -->  
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />  
        <!-- 测试有效用的SQL Query -->  
        <property name="validationQuery" value="${jdbc.validationQuery}" />  
        <!-- 连接空闲时测试是否有效 -->  
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />  
        <!-- 获取连接时测试是否有效 -->  
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />  
        <!-- 归还连接时是否测试有效 -->  
        <property name="testOnReturn" value="${jdbc.testOnReturn}" /> 
        <!--  -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100" />
        
        <property name="filters" value="${jdbc.filters}" />
        <property name="proxyFilters">
        	<list>
            	<ref bean="stat-filter" />
        	</list>
    	</property>
        <property name="connectionProperties" value="config.decrypt=true" />
        <!-- 定期把监控数据输出到日志
        <property name="timeBetweenLogStatsMillis" value="300000" /> -->
        
	</bean>
	
	
	<!-- druid aop监控后台执行效率 begin
	<bean id="druid-stat-interceptor"
    	class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
  	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
	    scope="prototype">
	    <property name="patterns">
	        <list>
	            <value>com.spring.service.impl.*.*</value>
	            <value>com.spring.dao.impl.*.*</value>
	        </list>
	    </property>
	</bean>
	<aop:config>
	    <aop:advisor advice-ref="druid-stat-interceptor"
	        pointcut-ref="druid-stat-pointcut" />
	</aop:config> -->
	<!-- druid aop监控后台执行效率 end -->
	
	<!-- mybatis 分页拦截器 -->
	<bean id="pageInterceptor" class="com.jty.mybatis.interceptor.PageInterceptor">
	</bean>
	
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- <property name="configLocation"
			value="classpath:mybatis-config.xml" /> -->
			
		<!-- <property name="mapperLocations">
			<list>
				表示在com.hoo.resultmap包或以下所有目录中，以-resultmap.xml结尾所有文件
				<value>classpath:com/hoo/resultmap/**/*-resultmap.xml</value>
				<value>classpath:com/hoo/entity/*-resultmap.xml</value>
				<value>classpath:com/hoo/mapper/**/*-mapper.xml</value>
			</list>
	    </property> -->
		<property name="mapperLocations" value="classpath:com/jty/orm/mapping/*.xml" />
		<property name="dataSource" ref="dataSource" />
		
		<!-- mybatis 配置文件,主要配置  dialect 和 pageSqlId 指的是 分页sql的过滤条件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 分页插件 -->
		<property name="plugins">
			<array>
				<ref bean="pageInterceptor"/>
			</array>
		</property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 模板 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 数据库的事务管理器配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
		<!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置事务（配置文件Xml的方式）
	<tx:advice id="bb" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="is*" read-only="true"
				propagation="SUPPORTS" />
			<tx:method name="get*" read-only="true"
				propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true"
				propagation="SUPPORTS" />
			<tx:method name="list*" read-only="true"
				propagation="SUPPORTS" />
			<tx:method name="query*" read-only="true"
				propagation="SUPPORTS" />
			<tx:method name="load*" read-only="true"
				propagation="SUPPORTS" />			
			<tx:method name="check*" read-only="true"
				propagation="SUPPORTS" />	
			<tx:method name="show*" read-only="true"
				propagation="SUPPORTS" />			
			<tx:method name="*Mongo" read-only="true"
				propagation="SUPPORTS" />			
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	 
	<aop:config>
		<aop:pointcut id="aa"
			expression="(execution(* com.jty.service.impl.*.*(..))) " />
			
		<aop:aspect id="myAop2" ref="bb">
		</aop:aspect>
	</aop:config>
	-->
	
	

</beans>